

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace CapaDatos
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class SistemaFacturacionRepuestoJoanEntities : DbContext
{
    public SistemaFacturacionRepuestoJoanEntities()
        : base("name=SistemaFacturacionRepuestoJoanEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<Menu> Menus { get; set; }

    public virtual DbSet<SubMenu> SubMenus { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<CategoriasProd> CategoriasProds { get; set; }

    public virtual DbSet<DetalleFactura> DetalleFacturas { get; set; }

    public virtual DbSet<Factura> Facturas { get; set; }

    public virtual DbSet<Producto> Productos { get; set; }

    public virtual DbSet<TiposPago> TiposPagoes { get; set; }

    public virtual DbSet<Cliente> Clientes { get; set; }

    public virtual DbSet<Proveedore> Proveedores { get; set; }

    public virtual DbSet<TiposFactura> TiposFacturas { get; set; }

    public virtual DbSet<OrdenesCompra> OrdenesCompras { get; set; }

    public virtual DbSet<DetalleOrdenesCompra> DetalleOrdenesCompras { get; set; }

    public virtual DbSet<FacturasCompra> FacturasCompras { get; set; }

    public virtual DbSet<CobrosVentasCredito> CobrosVentasCreditoes { get; set; }

    public virtual DbSet<LineasCreditoVenta> LineasCreditoVentas { get; set; }

    public virtual DbSet<DetalleNotaDeCredito> DetalleNotaDeCreditoes { get; set; }

    public virtual DbSet<NotasDeCredito> NotasDeCreditoes { get; set; }


    public virtual ObjectResult<proc_Menu_1_Result> proc_Menu_1()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Menu_1_Result>("proc_Menu_1");
    }


    public virtual ObjectResult<proc_Menu_2_Result> proc_Menu_2()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Menu_2_Result>("proc_Menu_2");
    }


    public virtual ObjectResult<proc_SubMenu_1_Result> proc_SubMenu_1()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_SubMenu_1_Result>("proc_SubMenu_1");
    }


    public virtual ObjectResult<proc_SubMenu_2_Result> proc_SubMenu_2()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_SubMenu_2_Result>("proc_SubMenu_2");
    }


    public virtual int proc_UsuariosInsert(string userName, string userPassword, Nullable<int> userLevel)
    {

        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var userPasswordParameter = userPassword != null ?
            new ObjectParameter("UserPassword", userPassword) :
            new ObjectParameter("UserPassword", typeof(string));


        var userLevelParameter = userLevel.HasValue ?
            new ObjectParameter("UserLevel", userLevel) :
            new ObjectParameter("UserLevel", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UsuariosInsert", userNameParameter, userPasswordParameter, userLevelParameter);
    }


    public virtual ObjectResult<proc_ValidarUsuario_Result> proc_ValidarUsuario(string user, string password, ObjectParameter resultado)
    {

        var userParameter = user != null ?
            new ObjectParameter("User", user) :
            new ObjectParameter("User", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ValidarUsuario_Result>("proc_ValidarUsuario", userParameter, passwordParameter, resultado);
    }


    public virtual int proc_ActualizarCategoriaProd(Nullable<int> categoriaProdID, string categoria, ObjectParameter resultado)
    {

        var categoriaProdIDParameter = categoriaProdID.HasValue ?
            new ObjectParameter("CategoriaProdID", categoriaProdID) :
            new ObjectParameter("CategoriaProdID", typeof(int));


        var categoriaParameter = categoria != null ?
            new ObjectParameter("Categoria", categoria) :
            new ObjectParameter("Categoria", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ActualizarCategoriaProd", categoriaProdIDParameter, categoriaParameter, resultado);
    }


    public virtual int proc_ActualizarCliente(Nullable<int> clienteID, string nombre, string cedulaORnc, string direccion, string contacto_1, string contacto_2, Nullable<double> descuento, ObjectParameter resultado)
    {

        var clienteIDParameter = clienteID.HasValue ?
            new ObjectParameter("ClienteID", clienteID) :
            new ObjectParameter("ClienteID", typeof(int));


        var nombreParameter = nombre != null ?
            new ObjectParameter("Nombre", nombre) :
            new ObjectParameter("Nombre", typeof(string));


        var cedulaORncParameter = cedulaORnc != null ?
            new ObjectParameter("CedulaORnc", cedulaORnc) :
            new ObjectParameter("CedulaORnc", typeof(string));


        var direccionParameter = direccion != null ?
            new ObjectParameter("Direccion", direccion) :
            new ObjectParameter("Direccion", typeof(string));


        var contacto_1Parameter = contacto_1 != null ?
            new ObjectParameter("Contacto_1", contacto_1) :
            new ObjectParameter("Contacto_1", typeof(string));


        var contacto_2Parameter = contacto_2 != null ?
            new ObjectParameter("Contacto_2", contacto_2) :
            new ObjectParameter("Contacto_2", typeof(string));


        var descuentoParameter = descuento.HasValue ?
            new ObjectParameter("Descuento", descuento) :
            new ObjectParameter("Descuento", typeof(double));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ActualizarCliente", clienteIDParameter, nombreParameter, cedulaORncParameter, direccionParameter, contacto_1Parameter, contacto_2Parameter, descuentoParameter, resultado);
    }


    public virtual int proc_ActualizarProducto(Nullable<int> productoID, string descripcion, string referencia, Nullable<int> categoriaID, string marca, Nullable<double> existencia, Nullable<decimal> precioCompra, Nullable<decimal> precioVenta, Nullable<int> proveedorID, string codigoBarra, string calidad, Nullable<bool> iTBIS, Nullable<decimal> descuento, Nullable<double> cantMin, Nullable<double> cantMax, ObjectParameter resultado)
    {

        var productoIDParameter = productoID.HasValue ?
            new ObjectParameter("ProductoID", productoID) :
            new ObjectParameter("ProductoID", typeof(int));


        var descripcionParameter = descripcion != null ?
            new ObjectParameter("Descripcion", descripcion) :
            new ObjectParameter("Descripcion", typeof(string));


        var referenciaParameter = referencia != null ?
            new ObjectParameter("Referencia", referencia) :
            new ObjectParameter("Referencia", typeof(string));


        var categoriaIDParameter = categoriaID.HasValue ?
            new ObjectParameter("CategoriaID", categoriaID) :
            new ObjectParameter("CategoriaID", typeof(int));


        var marcaParameter = marca != null ?
            new ObjectParameter("Marca", marca) :
            new ObjectParameter("Marca", typeof(string));


        var existenciaParameter = existencia.HasValue ?
            new ObjectParameter("Existencia", existencia) :
            new ObjectParameter("Existencia", typeof(double));


        var precioCompraParameter = precioCompra.HasValue ?
            new ObjectParameter("PrecioCompra", precioCompra) :
            new ObjectParameter("PrecioCompra", typeof(decimal));


        var precioVentaParameter = precioVenta.HasValue ?
            new ObjectParameter("PrecioVenta", precioVenta) :
            new ObjectParameter("PrecioVenta", typeof(decimal));


        var proveedorIDParameter = proveedorID.HasValue ?
            new ObjectParameter("ProveedorID", proveedorID) :
            new ObjectParameter("ProveedorID", typeof(int));


        var codigoBarraParameter = codigoBarra != null ?
            new ObjectParameter("CodigoBarra", codigoBarra) :
            new ObjectParameter("CodigoBarra", typeof(string));


        var calidadParameter = calidad != null ?
            new ObjectParameter("Calidad", calidad) :
            new ObjectParameter("Calidad", typeof(string));


        var iTBISParameter = iTBIS.HasValue ?
            new ObjectParameter("ITBIS", iTBIS) :
            new ObjectParameter("ITBIS", typeof(bool));


        var descuentoParameter = descuento.HasValue ?
            new ObjectParameter("Descuento", descuento) :
            new ObjectParameter("Descuento", typeof(decimal));


        var cantMinParameter = cantMin.HasValue ?
            new ObjectParameter("CantMin", cantMin) :
            new ObjectParameter("CantMin", typeof(double));


        var cantMaxParameter = cantMax.HasValue ?
            new ObjectParameter("CantMax", cantMax) :
            new ObjectParameter("CantMax", typeof(double));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ActualizarProducto", productoIDParameter, descripcionParameter, referenciaParameter, categoriaIDParameter, marcaParameter, existenciaParameter, precioCompraParameter, precioVentaParameter, proveedorIDParameter, codigoBarraParameter, calidadParameter, iTBISParameter, descuentoParameter, cantMinParameter, cantMaxParameter, resultado);
    }


    public virtual int proc_ActualizarProveedor(Nullable<int> proveedorID, string nombre, string cedulaORnc, string direccion, string contacto_1, string contacto_2, string datoAdicional, ObjectParameter resultado)
    {

        var proveedorIDParameter = proveedorID.HasValue ?
            new ObjectParameter("ProveedorID", proveedorID) :
            new ObjectParameter("ProveedorID", typeof(int));


        var nombreParameter = nombre != null ?
            new ObjectParameter("Nombre", nombre) :
            new ObjectParameter("Nombre", typeof(string));


        var cedulaORncParameter = cedulaORnc != null ?
            new ObjectParameter("CedulaORnc", cedulaORnc) :
            new ObjectParameter("CedulaORnc", typeof(string));


        var direccionParameter = direccion != null ?
            new ObjectParameter("Direccion", direccion) :
            new ObjectParameter("Direccion", typeof(string));


        var contacto_1Parameter = contacto_1 != null ?
            new ObjectParameter("Contacto_1", contacto_1) :
            new ObjectParameter("Contacto_1", typeof(string));


        var contacto_2Parameter = contacto_2 != null ?
            new ObjectParameter("Contacto_2", contacto_2) :
            new ObjectParameter("Contacto_2", typeof(string));


        var datoAdicionalParameter = datoAdicional != null ?
            new ObjectParameter("DatoAdicional", datoAdicional) :
            new ObjectParameter("DatoAdicional", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ActualizarProveedor", proveedorIDParameter, nombreParameter, cedulaORncParameter, direccionParameter, contacto_1Parameter, contacto_2Parameter, datoAdicionalParameter, resultado);
    }


    public virtual int proc_ActualizarTiposPagos(Nullable<int> tipoPagoID, string tipoDePago, ObjectParameter resultado)
    {

        var tipoPagoIDParameter = tipoPagoID.HasValue ?
            new ObjectParameter("TipoPagoID", tipoPagoID) :
            new ObjectParameter("TipoPagoID", typeof(int));


        var tipoDePagoParameter = tipoDePago != null ?
            new ObjectParameter("TipoDePago", tipoDePago) :
            new ObjectParameter("TipoDePago", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ActualizarTiposPagos", tipoPagoIDParameter, tipoDePagoParameter, resultado);
    }


    public virtual int proc_BorrarCategoriaProd(Nullable<int> categoriaProdID, ObjectParameter resultado)
    {

        var categoriaProdIDParameter = categoriaProdID.HasValue ?
            new ObjectParameter("CategoriaProdID", categoriaProdID) :
            new ObjectParameter("CategoriaProdID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BorrarCategoriaProd", categoriaProdIDParameter, resultado);
    }


    public virtual int proc_BorrarCliente(Nullable<int> clienteID, ObjectParameter resultado)
    {

        var clienteIDParameter = clienteID.HasValue ?
            new ObjectParameter("ClienteID", clienteID) :
            new ObjectParameter("ClienteID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BorrarCliente", clienteIDParameter, resultado);
    }


    public virtual int proc_BorrarProducto(Nullable<int> productoID, ObjectParameter resultado)
    {

        var productoIDParameter = productoID.HasValue ?
            new ObjectParameter("ProductoID", productoID) :
            new ObjectParameter("ProductoID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BorrarProducto", productoIDParameter, resultado);
    }


    public virtual int proc_BorrarProveedor(Nullable<int> proveedorID, ObjectParameter resultado)
    {

        var proveedorIDParameter = proveedorID.HasValue ?
            new ObjectParameter("ProveedorID", proveedorID) :
            new ObjectParameter("ProveedorID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BorrarProveedor", proveedorIDParameter, resultado);
    }


    public virtual int proc_BorrarTiposPagos(Nullable<int> tipoPagoID, ObjectParameter resultado)
    {

        var tipoPagoIDParameter = tipoPagoID.HasValue ?
            new ObjectParameter("TipoPagoID", tipoPagoID) :
            new ObjectParameter("TipoPagoID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BorrarTiposPagos", tipoPagoIDParameter, resultado);
    }


    public virtual ObjectResult<proc_CargarTodasCategoriasProd_Result> proc_CargarTodasCategoriasProd()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodasCategoriasProd_Result>("proc_CargarTodasCategoriasProd");
    }


    public virtual ObjectResult<proc_CargarTodasFacturas_Result> proc_CargarTodasFacturas()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodasFacturas_Result>("proc_CargarTodasFacturas");
    }


    public virtual ObjectResult<proc_CargarTodosClientes_Result> proc_CargarTodosClientes()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodosClientes_Result>("proc_CargarTodosClientes");
    }


    public virtual ObjectResult<proc_CargarTodosProductos_Result> proc_CargarTodosProductos()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodosProductos_Result>("proc_CargarTodosProductos");
    }


    public virtual ObjectResult<proc_CargarTodosProveedores_Result> proc_CargarTodosProveedores()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodosProveedores_Result>("proc_CargarTodosProveedores");
    }


    public virtual ObjectResult<proc_CargarTodosTiposFactura_Result> proc_CargarTodosTiposFactura()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodosTiposFactura_Result>("proc_CargarTodosTiposFactura");
    }


    public virtual ObjectResult<proc_CargarTodosTiposPagos_Result> proc_CargarTodosTiposPagos()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodosTiposPagos_Result>("proc_CargarTodosTiposPagos");
    }


    public virtual int proc_InsertarCategoriaProd(ObjectParameter categoriaProdID, string categoria, ObjectParameter resultado)
    {

        var categoriaParameter = categoria != null ?
            new ObjectParameter("Categoria", categoria) :
            new ObjectParameter("Categoria", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarCategoriaProd", categoriaProdID, categoriaParameter, resultado);
    }


    public virtual int proc_InsertarCliente(ObjectParameter clienteID, string nombre, string cedulaORnc, string direccion, string contacto_1, string contacto_2, Nullable<double> descuento, ObjectParameter resultado)
    {

        var nombreParameter = nombre != null ?
            new ObjectParameter("Nombre", nombre) :
            new ObjectParameter("Nombre", typeof(string));


        var cedulaORncParameter = cedulaORnc != null ?
            new ObjectParameter("CedulaORnc", cedulaORnc) :
            new ObjectParameter("CedulaORnc", typeof(string));


        var direccionParameter = direccion != null ?
            new ObjectParameter("Direccion", direccion) :
            new ObjectParameter("Direccion", typeof(string));


        var contacto_1Parameter = contacto_1 != null ?
            new ObjectParameter("Contacto_1", contacto_1) :
            new ObjectParameter("Contacto_1", typeof(string));


        var contacto_2Parameter = contacto_2 != null ?
            new ObjectParameter("Contacto_2", contacto_2) :
            new ObjectParameter("Contacto_2", typeof(string));


        var descuentoParameter = descuento.HasValue ?
            new ObjectParameter("Descuento", descuento) :
            new ObjectParameter("Descuento", typeof(double));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarCliente", clienteID, nombreParameter, cedulaORncParameter, direccionParameter, contacto_1Parameter, contacto_2Parameter, descuentoParameter, resultado);
    }


    public virtual int proc_InsertarFactura(ObjectParameter facturaID, Nullable<int> clienteID, Nullable<System.DateTime> fecha, Nullable<int> tipoPagoID, Nullable<int> tipoFacturaID, string nCF, Nullable<System.DateTime> fechaVencimiento, Nullable<int> userID, string rNC, string entidad, ObjectParameter resultado)
    {

        var clienteIDParameter = clienteID.HasValue ?
            new ObjectParameter("ClienteID", clienteID) :
            new ObjectParameter("ClienteID", typeof(int));


        var fechaParameter = fecha.HasValue ?
            new ObjectParameter("Fecha", fecha) :
            new ObjectParameter("Fecha", typeof(System.DateTime));


        var tipoPagoIDParameter = tipoPagoID.HasValue ?
            new ObjectParameter("TipoPagoID", tipoPagoID) :
            new ObjectParameter("TipoPagoID", typeof(int));


        var tipoFacturaIDParameter = tipoFacturaID.HasValue ?
            new ObjectParameter("TipoFacturaID", tipoFacturaID) :
            new ObjectParameter("TipoFacturaID", typeof(int));


        var nCFParameter = nCF != null ?
            new ObjectParameter("NCF", nCF) :
            new ObjectParameter("NCF", typeof(string));


        var fechaVencimientoParameter = fechaVencimiento.HasValue ?
            new ObjectParameter("FechaVencimiento", fechaVencimiento) :
            new ObjectParameter("FechaVencimiento", typeof(System.DateTime));


        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(int));


        var rNCParameter = rNC != null ?
            new ObjectParameter("RNC", rNC) :
            new ObjectParameter("RNC", typeof(string));


        var entidadParameter = entidad != null ?
            new ObjectParameter("Entidad", entidad) :
            new ObjectParameter("Entidad", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarFactura", facturaID, clienteIDParameter, fechaParameter, tipoPagoIDParameter, tipoFacturaIDParameter, nCFParameter, fechaVencimientoParameter, userIDParameter, rNCParameter, entidadParameter, resultado);
    }


    public virtual int proc_InsertarProducto(ObjectParameter productoID, string descripcion, string referencia, Nullable<int> categoriaID, string marca, Nullable<double> existencia, Nullable<decimal> precioCompra, Nullable<decimal> precioVenta, Nullable<int> proveedorID, string codigoBarra, string calidad, Nullable<bool> iTBIS, Nullable<decimal> descuento, Nullable<double> cantMin, Nullable<double> cantMax, ObjectParameter resultado)
    {

        var descripcionParameter = descripcion != null ?
            new ObjectParameter("Descripcion", descripcion) :
            new ObjectParameter("Descripcion", typeof(string));


        var referenciaParameter = referencia != null ?
            new ObjectParameter("Referencia", referencia) :
            new ObjectParameter("Referencia", typeof(string));


        var categoriaIDParameter = categoriaID.HasValue ?
            new ObjectParameter("CategoriaID", categoriaID) :
            new ObjectParameter("CategoriaID", typeof(int));


        var marcaParameter = marca != null ?
            new ObjectParameter("Marca", marca) :
            new ObjectParameter("Marca", typeof(string));


        var existenciaParameter = existencia.HasValue ?
            new ObjectParameter("Existencia", existencia) :
            new ObjectParameter("Existencia", typeof(double));


        var precioCompraParameter = precioCompra.HasValue ?
            new ObjectParameter("PrecioCompra", precioCompra) :
            new ObjectParameter("PrecioCompra", typeof(decimal));


        var precioVentaParameter = precioVenta.HasValue ?
            new ObjectParameter("PrecioVenta", precioVenta) :
            new ObjectParameter("PrecioVenta", typeof(decimal));


        var proveedorIDParameter = proveedorID.HasValue ?
            new ObjectParameter("ProveedorID", proveedorID) :
            new ObjectParameter("ProveedorID", typeof(int));


        var codigoBarraParameter = codigoBarra != null ?
            new ObjectParameter("CodigoBarra", codigoBarra) :
            new ObjectParameter("CodigoBarra", typeof(string));


        var calidadParameter = calidad != null ?
            new ObjectParameter("Calidad", calidad) :
            new ObjectParameter("Calidad", typeof(string));


        var iTBISParameter = iTBIS.HasValue ?
            new ObjectParameter("ITBIS", iTBIS) :
            new ObjectParameter("ITBIS", typeof(bool));


        var descuentoParameter = descuento.HasValue ?
            new ObjectParameter("Descuento", descuento) :
            new ObjectParameter("Descuento", typeof(decimal));


        var cantMinParameter = cantMin.HasValue ?
            new ObjectParameter("CantMin", cantMin) :
            new ObjectParameter("CantMin", typeof(double));


        var cantMaxParameter = cantMax.HasValue ?
            new ObjectParameter("CantMax", cantMax) :
            new ObjectParameter("CantMax", typeof(double));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarProducto", productoID, descripcionParameter, referenciaParameter, categoriaIDParameter, marcaParameter, existenciaParameter, precioCompraParameter, precioVentaParameter, proveedorIDParameter, codigoBarraParameter, calidadParameter, iTBISParameter, descuentoParameter, cantMinParameter, cantMaxParameter, resultado);
    }


    public virtual int proc_InsertarProveedor(ObjectParameter proveedorID, string nombre, string cedulaORnc, string direccion, string contacto_1, string contacto_2, string datoAdicional, ObjectParameter resultado)
    {

        var nombreParameter = nombre != null ?
            new ObjectParameter("Nombre", nombre) :
            new ObjectParameter("Nombre", typeof(string));


        var cedulaORncParameter = cedulaORnc != null ?
            new ObjectParameter("CedulaORnc", cedulaORnc) :
            new ObjectParameter("CedulaORnc", typeof(string));


        var direccionParameter = direccion != null ?
            new ObjectParameter("Direccion", direccion) :
            new ObjectParameter("Direccion", typeof(string));


        var contacto_1Parameter = contacto_1 != null ?
            new ObjectParameter("Contacto_1", contacto_1) :
            new ObjectParameter("Contacto_1", typeof(string));


        var contacto_2Parameter = contacto_2 != null ?
            new ObjectParameter("Contacto_2", contacto_2) :
            new ObjectParameter("Contacto_2", typeof(string));


        var datoAdicionalParameter = datoAdicional != null ?
            new ObjectParameter("DatoAdicional", datoAdicional) :
            new ObjectParameter("DatoAdicional", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarProveedor", proveedorID, nombreParameter, cedulaORncParameter, direccionParameter, contacto_1Parameter, contacto_2Parameter, datoAdicionalParameter, resultado);
    }


    public virtual int proc_InsertarTipoPago(ObjectParameter tipoPagoID, string tipoDePago, ObjectParameter resultado)
    {

        var tipoDePagoParameter = tipoDePago != null ?
            new ObjectParameter("TipoDePago", tipoDePago) :
            new ObjectParameter("TipoDePago", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarTipoPago", tipoPagoID, tipoDePagoParameter, resultado);
    }


    public virtual int proc_InsertarTiposFactura(ObjectParameter tipoFacturaID, string tipoDeFactura, ObjectParameter resultado)
    {

        var tipoDeFacturaParameter = tipoDeFactura != null ?
            new ObjectParameter("TipoDeFactura", tipoDeFactura) :
            new ObjectParameter("TipoDeFactura", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarTiposFactura", tipoFacturaID, tipoDeFacturaParameter, resultado);
    }


    public virtual ObjectResult<proc_BuscarClientesPorID_Result> proc_BuscarClientesPorID(Nullable<int> clienteID)
    {

        var clienteIDParameter = clienteID.HasValue ?
            new ObjectParameter("ClienteID", clienteID) :
            new ObjectParameter("ClienteID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_BuscarClientesPorID_Result>("proc_BuscarClientesPorID", clienteIDParameter);
    }


    public virtual ObjectResult<proc_BuscarProveedoresPorID_Result> proc_BuscarProveedoresPorID(Nullable<int> proveedorID)
    {

        var proveedorIDParameter = proveedorID.HasValue ?
            new ObjectParameter("ProveedorID", proveedorID) :
            new ObjectParameter("ProveedorID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_BuscarProveedoresPorID_Result>("proc_BuscarProveedoresPorID", proveedorIDParameter);
    }


    public virtual ObjectResult<proc_BuscarProductosPorID_Result> proc_BuscarProductosPorID(Nullable<int> productoID)
    {

        var productoIDParameter = productoID.HasValue ?
            new ObjectParameter("ProductoID", productoID) :
            new ObjectParameter("ProductoID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_BuscarProductosPorID_Result>("proc_BuscarProductosPorID", productoIDParameter);
    }


    public virtual ObjectResult<proc_BuscarProductosPorCodigoBarra_Result> proc_BuscarProductosPorCodigoBarra(string codigoBarra)
    {

        var codigoBarraParameter = codigoBarra != null ?
            new ObjectParameter("CodigoBarra", codigoBarra) :
            new ObjectParameter("CodigoBarra", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_BuscarProductosPorCodigoBarra_Result>("proc_BuscarProductosPorCodigoBarra", codigoBarraParameter);
    }


    public virtual int proc_ActualizarCantidadProducto(string codigoBarra, Nullable<double> existencia, ObjectParameter resultado)
    {

        var codigoBarraParameter = codigoBarra != null ?
            new ObjectParameter("CodigoBarra", codigoBarra) :
            new ObjectParameter("CodigoBarra", typeof(string));


        var existenciaParameter = existencia.HasValue ?
            new ObjectParameter("Existencia", existencia) :
            new ObjectParameter("Existencia", typeof(double));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ActualizarCantidadProducto", codigoBarraParameter, existenciaParameter, resultado);
    }


    public virtual ObjectResult<proc_BuscarCantidadProductosPorCodigoBarra_Result> proc_BuscarCantidadProductosPorCodigoBarra(string codigoBarra)
    {

        var codigoBarraParameter = codigoBarra != null ?
            new ObjectParameter("CodigoBarra", codigoBarra) :
            new ObjectParameter("CodigoBarra", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_BuscarCantidadProductosPorCodigoBarra_Result>("proc_BuscarCantidadProductosPorCodigoBarra", codigoBarraParameter);
    }


    public virtual ObjectResult<proc_CargarTodasFacturasCFinal_Result> proc_CargarTodasFacturasCFinal()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodasFacturasCFinal_Result>("proc_CargarTodasFacturasCFinal");
    }


    public virtual int proc_InsertarDetalleFactura(ObjectParameter detalleFacturaID, Nullable<int> facturaID, Nullable<int> productoID, Nullable<double> cantVen, Nullable<decimal> precio, Nullable<decimal> iTBIS, Nullable<decimal> descuento, ObjectParameter resultado)
    {

        var facturaIDParameter = facturaID.HasValue ?
            new ObjectParameter("FacturaID", facturaID) :
            new ObjectParameter("FacturaID", typeof(int));


        var productoIDParameter = productoID.HasValue ?
            new ObjectParameter("ProductoID", productoID) :
            new ObjectParameter("ProductoID", typeof(int));


        var cantVenParameter = cantVen.HasValue ?
            new ObjectParameter("CantVen", cantVen) :
            new ObjectParameter("CantVen", typeof(double));


        var precioParameter = precio.HasValue ?
            new ObjectParameter("Precio", precio) :
            new ObjectParameter("Precio", typeof(decimal));


        var iTBISParameter = iTBIS.HasValue ?
            new ObjectParameter("ITBIS", iTBIS) :
            new ObjectParameter("ITBIS", typeof(decimal));


        var descuentoParameter = descuento.HasValue ?
            new ObjectParameter("Descuento", descuento) :
            new ObjectParameter("Descuento", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarDetalleFactura", detalleFacturaID, facturaIDParameter, productoIDParameter, cantVenParameter, precioParameter, iTBISParameter, descuentoParameter, resultado);
    }


    public virtual int proc_InsertarFacturaCFinal(ObjectParameter facturaID, Nullable<int> clienteID, Nullable<System.DateTime> fecha, Nullable<int> tipoPagoID, string nCF, Nullable<int> userID, string observaciones, ObjectParameter resultado)
    {

        var clienteIDParameter = clienteID.HasValue ?
            new ObjectParameter("ClienteID", clienteID) :
            new ObjectParameter("ClienteID", typeof(int));


        var fechaParameter = fecha.HasValue ?
            new ObjectParameter("Fecha", fecha) :
            new ObjectParameter("Fecha", typeof(System.DateTime));


        var tipoPagoIDParameter = tipoPagoID.HasValue ?
            new ObjectParameter("TipoPagoID", tipoPagoID) :
            new ObjectParameter("TipoPagoID", typeof(int));


        var nCFParameter = nCF != null ?
            new ObjectParameter("NCF", nCF) :
            new ObjectParameter("NCF", typeof(string));


        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(int));


        var observacionesParameter = observaciones != null ?
            new ObjectParameter("Observaciones", observaciones) :
            new ObjectParameter("Observaciones", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarFacturaCFinal", facturaID, clienteIDParameter, fechaParameter, tipoPagoIDParameter, nCFParameter, userIDParameter, observacionesParameter, resultado);
    }


    public virtual ObjectResult<proc_CargarFacturaVentaCFinal_Result> proc_CargarFacturaVentaCFinal()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarFacturaVentaCFinal_Result>("proc_CargarFacturaVentaCFinal");
    }


    public virtual ObjectResult<proc_CargarFacturaVentaCFiscal_Result> proc_CargarFacturaVentaCFiscal()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarFacturaVentaCFiscal_Result>("proc_CargarFacturaVentaCFiscal");
    }


    public virtual ObjectResult<proc_VerTipoUltimaFactura_Result> proc_VerTipoUltimaFactura()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_VerTipoUltimaFactura_Result>("proc_VerTipoUltimaFactura");
    }


    public virtual ObjectResult<proc_CargarCategoriasProd_Result> proc_CargarCategoriasProd()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarCategoriasProd_Result>("proc_CargarCategoriasProd");
    }


    public virtual int proc_ActualizarTiposFacturas(Nullable<int> tipoFacturaID, string tipoDeFactura, ObjectParameter resultado)
    {

        var tipoFacturaIDParameter = tipoFacturaID.HasValue ?
            new ObjectParameter("TipoFacturaID", tipoFacturaID) :
            new ObjectParameter("TipoFacturaID", typeof(int));


        var tipoDeFacturaParameter = tipoDeFactura != null ?
            new ObjectParameter("TipoDeFactura", tipoDeFactura) :
            new ObjectParameter("TipoDeFactura", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ActualizarTiposFacturas", tipoFacturaIDParameter, tipoDeFacturaParameter, resultado);
    }


    public virtual int proc_BorrarTiposFacturas(Nullable<int> tipoFacturaID, ObjectParameter resultado)
    {

        var tipoFacturaIDParameter = tipoFacturaID.HasValue ?
            new ObjectParameter("TipoFacturaID", tipoFacturaID) :
            new ObjectParameter("TipoFacturaID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BorrarTiposFacturas", tipoFacturaIDParameter, resultado);
    }


    public virtual ObjectResult<proc_CargarProductosComprar_Result> proc_CargarProductosComprar()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarProductosComprar_Result>("proc_CargarProductosComprar");
    }


    public virtual ObjectResult<proc_CargarProductosExistBaja_Result> proc_CargarProductosExistBaja()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarProductosExistBaja_Result>("proc_CargarProductosExistBaja");
    }


    public virtual int proc_InsertarOrdenCompra(ObjectParameter ordenCompraID, Nullable<int> proveedorID, Nullable<System.DateTime> fechaPedido, Nullable<bool> estatus, ObjectParameter resultado)
    {

        var proveedorIDParameter = proveedorID.HasValue ?
            new ObjectParameter("ProveedorID", proveedorID) :
            new ObjectParameter("ProveedorID", typeof(int));


        var fechaPedidoParameter = fechaPedido.HasValue ?
            new ObjectParameter("FechaPedido", fechaPedido) :
            new ObjectParameter("FechaPedido", typeof(System.DateTime));


        var estatusParameter = estatus.HasValue ?
            new ObjectParameter("Estatus", estatus) :
            new ObjectParameter("Estatus", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarOrdenCompra", ordenCompraID, proveedorIDParameter, fechaPedidoParameter, estatusParameter, resultado);
    }


    public virtual int proc_InsertarDetalleOrdenCompra(ObjectParameter detalleOrdenCompraID, Nullable<int> ordenCompraID, Nullable<int> productoID, Nullable<double> cantOrdenada, Nullable<decimal> precio, ObjectParameter resultado)
    {

        var ordenCompraIDParameter = ordenCompraID.HasValue ?
            new ObjectParameter("OrdenCompraID", ordenCompraID) :
            new ObjectParameter("OrdenCompraID", typeof(int));


        var productoIDParameter = productoID.HasValue ?
            new ObjectParameter("ProductoID", productoID) :
            new ObjectParameter("ProductoID", typeof(int));


        var cantOrdenadaParameter = cantOrdenada.HasValue ?
            new ObjectParameter("CantOrdenada", cantOrdenada) :
            new ObjectParameter("CantOrdenada", typeof(double));


        var precioParameter = precio.HasValue ?
            new ObjectParameter("Precio", precio) :
            new ObjectParameter("Precio", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarDetalleOrdenCompra", detalleOrdenCompraID, ordenCompraIDParameter, productoIDParameter, cantOrdenadaParameter, precioParameter, resultado);
    }


    public virtual ObjectResult<proc_CargarTodasOrdenesCompra_Result> proc_CargarTodasOrdenesCompra()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodasOrdenesCompra_Result>("proc_CargarTodasOrdenesCompra");
    }


    public virtual ObjectResult<proc_BuscarProveedoresPorNombre_Result> proc_BuscarProveedoresPorNombre(string nombre)
    {

        var nombreParameter = nombre != null ?
            new ObjectParameter("Nombre", nombre) :
            new ObjectParameter("Nombre", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_BuscarProveedoresPorNombre_Result>("proc_BuscarProveedoresPorNombre", nombreParameter);
    }


    public virtual ObjectResult<proc_CargarProductosExistBajaPorProveedor_Result> proc_CargarProductosExistBajaPorProveedor(Nullable<int> proveedorID)
    {

        var proveedorIDParameter = proveedorID.HasValue ?
            new ObjectParameter("ProveedorID", proveedorID) :
            new ObjectParameter("ProveedorID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarProductosExistBajaPorProveedor_Result>("proc_CargarProductosExistBajaPorProveedor", proveedorIDParameter);
    }


    public virtual ObjectResult<proc_BuscarProductosPorProveedor_Result> proc_BuscarProductosPorProveedor(Nullable<int> proveedorID)
    {

        var proveedorIDParameter = proveedorID.HasValue ?
            new ObjectParameter("ProveedorID", proveedorID) :
            new ObjectParameter("ProveedorID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_BuscarProductosPorProveedor_Result>("proc_BuscarProductosPorProveedor", proveedorIDParameter);
    }


    public virtual ObjectResult<proc_CargarDetalleOrdenCompra_Result> proc_CargarDetalleOrdenCompra(Nullable<int> ordenCompraID)
    {

        var ordenCompraIDParameter = ordenCompraID.HasValue ?
            new ObjectParameter("OrdenCompraID", ordenCompraID) :
            new ObjectParameter("OrdenCompraID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarDetalleOrdenCompra_Result>("proc_CargarDetalleOrdenCompra", ordenCompraIDParameter);
    }


    public virtual int proc_ActualizarDetalleOrdenCompra(Nullable<int> ordenCompraID, Nullable<int> productoID, Nullable<double> cantidadOrdenada, Nullable<double> cantidadRecibida, Nullable<decimal> precio, ObjectParameter resultado)
    {

        var ordenCompraIDParameter = ordenCompraID.HasValue ?
            new ObjectParameter("OrdenCompraID", ordenCompraID) :
            new ObjectParameter("OrdenCompraID", typeof(int));


        var productoIDParameter = productoID.HasValue ?
            new ObjectParameter("ProductoID", productoID) :
            new ObjectParameter("ProductoID", typeof(int));


        var cantidadOrdenadaParameter = cantidadOrdenada.HasValue ?
            new ObjectParameter("CantidadOrdenada", cantidadOrdenada) :
            new ObjectParameter("CantidadOrdenada", typeof(double));


        var cantidadRecibidaParameter = cantidadRecibida.HasValue ?
            new ObjectParameter("CantidadRecibida", cantidadRecibida) :
            new ObjectParameter("CantidadRecibida", typeof(double));


        var precioParameter = precio.HasValue ?
            new ObjectParameter("Precio", precio) :
            new ObjectParameter("Precio", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ActualizarDetalleOrdenCompra", ordenCompraIDParameter, productoIDParameter, cantidadOrdenadaParameter, cantidadRecibidaParameter, precioParameter, resultado);
    }


    public virtual int proc_BorrarDetalleOrdenCompra(Nullable<int> ordenCompraID, Nullable<int> productoID, ObjectParameter resultado)
    {

        var ordenCompraIDParameter = ordenCompraID.HasValue ?
            new ObjectParameter("OrdenCompraID", ordenCompraID) :
            new ObjectParameter("OrdenCompraID", typeof(int));


        var productoIDParameter = productoID.HasValue ?
            new ObjectParameter("ProductoID", productoID) :
            new ObjectParameter("ProductoID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BorrarDetalleOrdenCompra", ordenCompraIDParameter, productoIDParameter, resultado);
    }


    public virtual int proc_CerrarOrdenCompra(Nullable<int> ordenCompraID)
    {

        var ordenCompraIDParameter = ordenCompraID.HasValue ?
            new ObjectParameter("OrdenCompraID", ordenCompraID) :
            new ObjectParameter("OrdenCompraID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_CerrarOrdenCompra", ordenCompraIDParameter);
    }


    public virtual int proc_InsertarFacturaCompra(ObjectParameter facturaCompraID, Nullable<int> proveedorID, Nullable<int> ordenCompraID, string nCF, Nullable<System.DateTime> fechaVencimientoSecuencia, Nullable<System.DateTime> fechaFactura, Nullable<int> tipoPagoID, Nullable<decimal> subTotal, Nullable<decimal> iTBIS, ObjectParameter resultado)
    {

        var proveedorIDParameter = proveedorID.HasValue ?
            new ObjectParameter("ProveedorID", proveedorID) :
            new ObjectParameter("ProveedorID", typeof(int));


        var ordenCompraIDParameter = ordenCompraID.HasValue ?
            new ObjectParameter("OrdenCompraID", ordenCompraID) :
            new ObjectParameter("OrdenCompraID", typeof(int));


        var nCFParameter = nCF != null ?
            new ObjectParameter("NCF", nCF) :
            new ObjectParameter("NCF", typeof(string));


        var fechaVencimientoSecuenciaParameter = fechaVencimientoSecuencia.HasValue ?
            new ObjectParameter("FechaVencimientoSecuencia", fechaVencimientoSecuencia) :
            new ObjectParameter("FechaVencimientoSecuencia", typeof(System.DateTime));


        var fechaFacturaParameter = fechaFactura.HasValue ?
            new ObjectParameter("FechaFactura", fechaFactura) :
            new ObjectParameter("FechaFactura", typeof(System.DateTime));


        var tipoPagoIDParameter = tipoPagoID.HasValue ?
            new ObjectParameter("TipoPagoID", tipoPagoID) :
            new ObjectParameter("TipoPagoID", typeof(int));


        var subTotalParameter = subTotal.HasValue ?
            new ObjectParameter("SubTotal", subTotal) :
            new ObjectParameter("SubTotal", typeof(decimal));


        var iTBISParameter = iTBIS.HasValue ?
            new ObjectParameter("ITBIS", iTBIS) :
            new ObjectParameter("ITBIS", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarFacturaCompra", facturaCompraID, proveedorIDParameter, ordenCompraIDParameter, nCFParameter, fechaVencimientoSecuenciaParameter, fechaFacturaParameter, tipoPagoIDParameter, subTotalParameter, iTBISParameter, resultado);
    }


    public virtual ObjectResult<proc_VerTipoPagoUltimaFactura_Result> proc_VerTipoPagoUltimaFactura()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_VerTipoPagoUltimaFactura_Result>("proc_VerTipoPagoUltimaFactura");
    }


    public virtual int proc_ActualizarLineaCreditoVenta(Nullable<int> lineaCreditoVentaID, Nullable<bool> estatus, ObjectParameter resultado)
    {

        var lineaCreditoVentaIDParameter = lineaCreditoVentaID.HasValue ?
            new ObjectParameter("LineaCreditoVentaID", lineaCreditoVentaID) :
            new ObjectParameter("LineaCreditoVentaID", typeof(int));


        var estatusParameter = estatus.HasValue ?
            new ObjectParameter("Estatus", estatus) :
            new ObjectParameter("Estatus", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ActualizarLineaCreditoVenta", lineaCreditoVentaIDParameter, estatusParameter, resultado);
    }


    public virtual ObjectResult<proc_CargarTodasLineasCreditoVentas_Result> proc_CargarTodasLineasCreditoVentas()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodasLineasCreditoVentas_Result>("proc_CargarTodasLineasCreditoVentas");
    }


    public virtual ObjectResult<proc_CargarTodasLineasCreditoVentasCompletadas_Result> proc_CargarTodasLineasCreditoVentasCompletadas()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodasLineasCreditoVentasCompletadas_Result>("proc_CargarTodasLineasCreditoVentasCompletadas");
    }


    public virtual ObjectResult<proc_CargarTodasLineasCreditoVentasPendientes_Result> proc_CargarTodasLineasCreditoVentasPendientes()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodasLineasCreditoVentasPendientes_Result>("proc_CargarTodasLineasCreditoVentasPendientes");
    }


    public virtual ObjectResult<proc_CargarTodasLineasCreditoVentasVencidas30_Result> proc_CargarTodasLineasCreditoVentasVencidas30()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodasLineasCreditoVentasVencidas30_Result>("proc_CargarTodasLineasCreditoVentasVencidas30");
    }


    public virtual ObjectResult<proc_CargarTodasLineasCreditoVentasVencidas60_Result> proc_CargarTodasLineasCreditoVentasVencidas60()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodasLineasCreditoVentasVencidas60_Result>("proc_CargarTodasLineasCreditoVentasVencidas60");
    }


    public virtual int proc_InsertarCobroVentaCredito(ObjectParameter cobroVentaCreditoID, Nullable<int> lineaCreditoVentaID, Nullable<System.DateTime> fechaCobro, Nullable<decimal> monto, Nullable<int> userID, string concepto, ObjectParameter resultado)
    {

        var lineaCreditoVentaIDParameter = lineaCreditoVentaID.HasValue ?
            new ObjectParameter("LineaCreditoVentaID", lineaCreditoVentaID) :
            new ObjectParameter("LineaCreditoVentaID", typeof(int));


        var fechaCobroParameter = fechaCobro.HasValue ?
            new ObjectParameter("FechaCobro", fechaCobro) :
            new ObjectParameter("FechaCobro", typeof(System.DateTime));


        var montoParameter = monto.HasValue ?
            new ObjectParameter("Monto", monto) :
            new ObjectParameter("Monto", typeof(decimal));


        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(int));


        var conceptoParameter = concepto != null ?
            new ObjectParameter("Concepto", concepto) :
            new ObjectParameter("Concepto", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarCobroVentaCredito", cobroVentaCreditoID, lineaCreditoVentaIDParameter, fechaCobroParameter, montoParameter, userIDParameter, conceptoParameter, resultado);
    }


    public virtual int proc_InsertarLineaCreditoVenta(ObjectParameter lineaCreditoVentaID, Nullable<int> facturaID, Nullable<bool> estatus, ObjectParameter resultado)
    {

        var facturaIDParameter = facturaID.HasValue ?
            new ObjectParameter("FacturaID", facturaID) :
            new ObjectParameter("FacturaID", typeof(int));


        var estatusParameter = estatus.HasValue ?
            new ObjectParameter("Estatus", estatus) :
            new ObjectParameter("Estatus", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarLineaCreditoVenta", lineaCreditoVentaID, facturaIDParameter, estatusParameter, resultado);
    }


    public virtual int proc_VerificarLimite(ObjectParameter resultado, Nullable<int> clienteID, Nullable<decimal> montoFactura)
    {

        var clienteIDParameter = clienteID.HasValue ?
            new ObjectParameter("ClienteID", clienteID) :
            new ObjectParameter("ClienteID", typeof(int));


        var montoFacturaParameter = montoFactura.HasValue ?
            new ObjectParameter("MontoFactura", montoFactura) :
            new ObjectParameter("MontoFactura", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_VerificarLimite", resultado, clienteIDParameter, montoFacturaParameter);
    }


    public virtual ObjectResult<proc_CargarCobrosVentaCredito_Result> proc_CargarCobrosVentaCredito(Nullable<int> lineaVentaCreditoID)
    {

        var lineaVentaCreditoIDParameter = lineaVentaCreditoID.HasValue ?
            new ObjectParameter("LineaVentaCreditoID", lineaVentaCreditoID) :
            new ObjectParameter("LineaVentaCreditoID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarCobrosVentaCredito_Result>("proc_CargarCobrosVentaCredito", lineaVentaCreditoIDParameter);
    }


    public virtual int proc_ComprobarPagoLineaCreditoVenta(Nullable<int> lineaCreditoVentaID, Nullable<decimal> pagoLineaCreditoVenta, ObjectParameter resultado)
    {

        var lineaCreditoVentaIDParameter = lineaCreditoVentaID.HasValue ?
            new ObjectParameter("LineaCreditoVentaID", lineaCreditoVentaID) :
            new ObjectParameter("LineaCreditoVentaID", typeof(int));


        var pagoLineaCreditoVentaParameter = pagoLineaCreditoVenta.HasValue ?
            new ObjectParameter("PagoLineaCreditoVenta", pagoLineaCreditoVenta) :
            new ObjectParameter("PagoLineaCreditoVenta", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ComprobarPagoLineaCreditoVenta", lineaCreditoVentaIDParameter, pagoLineaCreditoVentaParameter, resultado);
    }


    public virtual ObjectResult<proc_ComprobantePagoLineaCreditoVenta_Result> proc_ComprobantePagoLineaCreditoVenta()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ComprobantePagoLineaCreditoVenta_Result>("proc_ComprobantePagoLineaCreditoVenta");
    }


    public virtual ObjectResult<proc_CargarMontoFacturaNC_Result> proc_CargarMontoFacturaNC(Nullable<int> facturaID)
    {

        var facturaIDParameter = facturaID.HasValue ?
            new ObjectParameter("FacturaID", facturaID) :
            new ObjectParameter("FacturaID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarMontoFacturaNC_Result>("proc_CargarMontoFacturaNC", facturaIDParameter);
    }


    public virtual ObjectResult<proc_CargarFacturasPendientes_Result> proc_CargarFacturasPendientes(Nullable<int> clienteID)
    {

        var clienteIDParameter = clienteID.HasValue ?
            new ObjectParameter("ClienteID", clienteID) :
            new ObjectParameter("ClienteID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarFacturasPendientes_Result>("proc_CargarFacturasPendientes", clienteIDParameter);
    }


    public virtual ObjectResult<proc_CargarProductosFactura_Result> proc_CargarProductosFactura(Nullable<int> facturaID)
    {

        var facturaIDParameter = facturaID.HasValue ?
            new ObjectParameter("FacturaID", facturaID) :
            new ObjectParameter("FacturaID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarProductosFactura_Result>("proc_CargarProductosFactura", facturaIDParameter);
    }


    public virtual int proc_InsertarDetalleNotaDeCredito(ObjectParameter detalleNotaDeCreditoID, Nullable<int> notaDeCreditoID, Nullable<int> productoID, Nullable<double> cantDevuelta, Nullable<double> cantInventariada, Nullable<decimal> precio, string comentario, ObjectParameter resultado)
    {

        var notaDeCreditoIDParameter = notaDeCreditoID.HasValue ?
            new ObjectParameter("NotaDeCreditoID", notaDeCreditoID) :
            new ObjectParameter("NotaDeCreditoID", typeof(int));


        var productoIDParameter = productoID.HasValue ?
            new ObjectParameter("ProductoID", productoID) :
            new ObjectParameter("ProductoID", typeof(int));


        var cantDevueltaParameter = cantDevuelta.HasValue ?
            new ObjectParameter("CantDevuelta", cantDevuelta) :
            new ObjectParameter("CantDevuelta", typeof(double));


        var cantInventariadaParameter = cantInventariada.HasValue ?
            new ObjectParameter("CantInventariada", cantInventariada) :
            new ObjectParameter("CantInventariada", typeof(double));


        var precioParameter = precio.HasValue ?
            new ObjectParameter("Precio", precio) :
            new ObjectParameter("Precio", typeof(decimal));


        var comentarioParameter = comentario != null ?
            new ObjectParameter("Comentario", comentario) :
            new ObjectParameter("Comentario", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarDetalleNotaDeCredito", detalleNotaDeCreditoID, notaDeCreditoIDParameter, productoIDParameter, cantDevueltaParameter, cantInventariadaParameter, precioParameter, comentarioParameter, resultado);
    }


    public virtual int proc_InsertarNotaDeCredito(ObjectParameter notaDeCreditoID, Nullable<int> facturaID, Nullable<int> facturaAplicarID, Nullable<System.DateTime> fecha, Nullable<int> userID, string nCF, Nullable<System.DateTime> fechaVencimiento, Nullable<decimal> valorAplicado, ObjectParameter resultado)
    {

        var facturaIDParameter = facturaID.HasValue ?
            new ObjectParameter("FacturaID", facturaID) :
            new ObjectParameter("FacturaID", typeof(int));


        var facturaAplicarIDParameter = facturaAplicarID.HasValue ?
            new ObjectParameter("FacturaAplicarID", facturaAplicarID) :
            new ObjectParameter("FacturaAplicarID", typeof(int));


        var fechaParameter = fecha.HasValue ?
            new ObjectParameter("Fecha", fecha) :
            new ObjectParameter("Fecha", typeof(System.DateTime));


        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(int));


        var nCFParameter = nCF != null ?
            new ObjectParameter("NCF", nCF) :
            new ObjectParameter("NCF", typeof(string));


        var fechaVencimientoParameter = fechaVencimiento.HasValue ?
            new ObjectParameter("FechaVencimiento", fechaVencimiento) :
            new ObjectParameter("FechaVencimiento", typeof(System.DateTime));


        var valorAplicadoParameter = valorAplicado.HasValue ?
            new ObjectParameter("ValorAplicado", valorAplicado) :
            new ObjectParameter("ValorAplicado", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarNotaDeCredito", notaDeCreditoID, facturaIDParameter, facturaAplicarIDParameter, fechaParameter, userIDParameter, nCFParameter, fechaVencimientoParameter, valorAplicadoParameter, resultado);
    }


    public virtual int proc_ConfirmarFacturaYCliente(Nullable<int> facturaID, Nullable<int> clienteID, ObjectParameter resultado)
    {

        var facturaIDParameter = facturaID.HasValue ?
            new ObjectParameter("FacturaID", facturaID) :
            new ObjectParameter("FacturaID", typeof(int));


        var clienteIDParameter = clienteID.HasValue ?
            new ObjectParameter("ClienteID", clienteID) :
            new ObjectParameter("ClienteID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ConfirmarFacturaYCliente", facturaIDParameter, clienteIDParameter, resultado);
    }


    public virtual ObjectResult<Nullable<int>> proc_BuscarLineaDeCreditoIDFactura(Nullable<int> facturaID, ObjectParameter lineaDeCreditoID)
    {

        var facturaIDParameter = facturaID.HasValue ?
            new ObjectParameter("FacturaID", facturaID) :
            new ObjectParameter("FacturaID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("proc_BuscarLineaDeCreditoIDFactura", facturaIDParameter, lineaDeCreditoID);
    }


    public virtual int proc_BuscarLineaDeCreditoVentaIDFactura(Nullable<int> facturaID, ObjectParameter lineaDeCreditoID)
    {

        var facturaIDParameter = facturaID.HasValue ?
            new ObjectParameter("FacturaID", facturaID) :
            new ObjectParameter("FacturaID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BuscarLineaDeCreditoVentaIDFactura", facturaIDParameter, lineaDeCreditoID);
    }


    public virtual ObjectResult<proc_CargarNotasDeCreditoCliente_Result> proc_CargarNotasDeCreditoCliente(Nullable<int> clienteID)
    {

        var clienteIDParameter = clienteID.HasValue ?
            new ObjectParameter("ClienteID", clienteID) :
            new ObjectParameter("ClienteID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarNotasDeCreditoCliente_Result>("proc_CargarNotasDeCreditoCliente", clienteIDParameter);
    }


    public virtual ObjectResult<proc_CargarTodasNotasDeCredito_Result> proc_CargarTodasNotasDeCredito()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodasNotasDeCredito_Result>("proc_CargarTodasNotasDeCredito");
    }


    public virtual ObjectResult<proc_CargarDetalleNotaDeCredito_Result> proc_CargarDetalleNotaDeCredito(Nullable<int> notaDeCreditoID)
    {

        var notaDeCreditoIDParameter = notaDeCreditoID.HasValue ?
            new ObjectParameter("NotaDeCreditoID", notaDeCreditoID) :
            new ObjectParameter("NotaDeCreditoID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarDetalleNotaDeCredito_Result>("proc_CargarDetalleNotaDeCredito", notaDeCreditoIDParameter);
    }


    public virtual ObjectResult<proc_CargarDetalleFacturaVenta_Result> proc_CargarDetalleFacturaVenta(Nullable<int> facturaID)
    {

        var facturaIDParameter = facturaID.HasValue ?
            new ObjectParameter("FacturaID", facturaID) :
            new ObjectParameter("FacturaID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarDetalleFacturaVenta_Result>("proc_CargarDetalleFacturaVenta", facturaIDParameter);
    }


    public virtual ObjectResult<proc_CargarOrdenesCompraPFecha_Result> proc_CargarOrdenesCompraPFecha(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
    {

        var fechaInicialParameter = fechaInicial.HasValue ?
            new ObjectParameter("FechaInicial", fechaInicial) :
            new ObjectParameter("FechaInicial", typeof(System.DateTime));


        var fechaFinalParameter = fechaFinal.HasValue ?
            new ObjectParameter("FechaFinal", fechaFinal) :
            new ObjectParameter("FechaFinal", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarOrdenesCompraPFecha_Result>("proc_CargarOrdenesCompraPFecha", fechaInicialParameter, fechaFinalParameter);
    }


    public virtual int proc_CalcularGanancias(ObjectParameter gananciaFContDia, ObjectParameter gananciaFContSemana, ObjectParameter gananciaFContMes, ObjectParameter gananciaFCredDia, ObjectParameter gananciaFCredSemana, ObjectParameter gananciaFCredMes)
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_CalcularGanancias", gananciaFContDia, gananciaFContSemana, gananciaFContMes, gananciaFCredDia, gananciaFCredSemana, gananciaFCredMes);
    }


    public virtual ObjectResult<proc_Cargar10ProductosVendidosPFecha_Result> proc_Cargar10ProductosVendidosPFecha(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
    {

        var fechaInicialParameter = fechaInicial.HasValue ?
            new ObjectParameter("FechaInicial", fechaInicial) :
            new ObjectParameter("FechaInicial", typeof(System.DateTime));


        var fechaFinalParameter = fechaFinal.HasValue ?
            new ObjectParameter("FechaFinal", fechaFinal) :
            new ObjectParameter("FechaFinal", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Cargar10ProductosVendidosPFecha_Result>("proc_Cargar10ProductosVendidosPFecha", fechaInicialParameter, fechaFinalParameter);
    }


    public virtual ObjectResult<proc_CargarCobrosVentaCreditoPFecha_Result> proc_CargarCobrosVentaCreditoPFecha(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
    {

        var fechaInicialParameter = fechaInicial.HasValue ?
            new ObjectParameter("FechaInicial", fechaInicial) :
            new ObjectParameter("FechaInicial", typeof(System.DateTime));


        var fechaFinalParameter = fechaFinal.HasValue ?
            new ObjectParameter("FechaFinal", fechaFinal) :
            new ObjectParameter("FechaFinal", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarCobrosVentaCreditoPFecha_Result>("proc_CargarCobrosVentaCreditoPFecha", fechaInicialParameter, fechaFinalParameter);
    }


    public virtual ObjectResult<proc_CargarFacturasPFecha_Result> proc_CargarFacturasPFecha(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
    {

        var fechaInicialParameter = fechaInicial.HasValue ?
            new ObjectParameter("FechaInicial", fechaInicial) :
            new ObjectParameter("FechaInicial", typeof(System.DateTime));


        var fechaFinalParameter = fechaFinal.HasValue ?
            new ObjectParameter("FechaFinal", fechaFinal) :
            new ObjectParameter("FechaFinal", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarFacturasPFecha_Result>("proc_CargarFacturasPFecha", fechaInicialParameter, fechaFinalParameter);
    }


    public virtual ObjectResult<proc_CargarLineasCreditoVentasCompletadasPFecha_Result> proc_CargarLineasCreditoVentasCompletadasPFecha(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
    {

        var fechaInicialParameter = fechaInicial.HasValue ?
            new ObjectParameter("FechaInicial", fechaInicial) :
            new ObjectParameter("FechaInicial", typeof(System.DateTime));


        var fechaFinalParameter = fechaFinal.HasValue ?
            new ObjectParameter("FechaFinal", fechaFinal) :
            new ObjectParameter("FechaFinal", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarLineasCreditoVentasCompletadasPFecha_Result>("proc_CargarLineasCreditoVentasCompletadasPFecha", fechaInicialParameter, fechaFinalParameter);
    }


    public virtual ObjectResult<proc_CargarLineasCreditoVentasPendientesPFecha_Result> proc_CargarLineasCreditoVentasPendientesPFecha(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
    {

        var fechaInicialParameter = fechaInicial.HasValue ?
            new ObjectParameter("FechaInicial", fechaInicial) :
            new ObjectParameter("FechaInicial", typeof(System.DateTime));


        var fechaFinalParameter = fechaFinal.HasValue ?
            new ObjectParameter("FechaFinal", fechaFinal) :
            new ObjectParameter("FechaFinal", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarLineasCreditoVentasPendientesPFecha_Result>("proc_CargarLineasCreditoVentasPendientesPFecha", fechaInicialParameter, fechaFinalParameter);
    }


    public virtual ObjectResult<proc_CargarLineasCreditoVentasVencidas30PFecha_Result> proc_CargarLineasCreditoVentasVencidas30PFecha(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
    {

        var fechaInicialParameter = fechaInicial.HasValue ?
            new ObjectParameter("FechaInicial", fechaInicial) :
            new ObjectParameter("FechaInicial", typeof(System.DateTime));


        var fechaFinalParameter = fechaFinal.HasValue ?
            new ObjectParameter("FechaFinal", fechaFinal) :
            new ObjectParameter("FechaFinal", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarLineasCreditoVentasVencidas30PFecha_Result>("proc_CargarLineasCreditoVentasVencidas30PFecha", fechaInicialParameter, fechaFinalParameter);
    }


    public virtual ObjectResult<proc_CargarNotasDeCreditoPFecha_Result> proc_CargarNotasDeCreditoPFecha(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
    {

        var fechaInicialParameter = fechaInicial.HasValue ?
            new ObjectParameter("FechaInicial", fechaInicial) :
            new ObjectParameter("FechaInicial", typeof(System.DateTime));


        var fechaFinalParameter = fechaFinal.HasValue ?
            new ObjectParameter("FechaFinal", fechaFinal) :
            new ObjectParameter("FechaFinal", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarNotasDeCreditoPFecha_Result>("proc_CargarNotasDeCreditoPFecha", fechaInicialParameter, fechaFinalParameter);
    }


    public virtual int proc_ActualizarUsers(Nullable<int> userID, string userName, string userPassword, Nullable<int> userLevel, ObjectParameter resultado)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(int));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var userPasswordParameter = userPassword != null ?
            new ObjectParameter("UserPassword", userPassword) :
            new ObjectParameter("UserPassword", typeof(string));


        var userLevelParameter = userLevel.HasValue ?
            new ObjectParameter("UserLevel", userLevel) :
            new ObjectParameter("UserLevel", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ActualizarUsers", userIDParameter, userNameParameter, userPasswordParameter, userLevelParameter, resultado);
    }


    public virtual int proc_BorrarUser(Nullable<int> userID, ObjectParameter resultado)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BorrarUser", userIDParameter, resultado);
    }


    public virtual ObjectResult<proc_CargarTodosUsers_Result> proc_CargarTodosUsers()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodosUsers_Result>("proc_CargarTodosUsers");
    }


    public virtual int proc_InsertarUser(ObjectParameter userID, string userName, string userPassword, Nullable<int> userLevel, ObjectParameter resultado)
    {

        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var userPasswordParameter = userPassword != null ?
            new ObjectParameter("UserPassword", userPassword) :
            new ObjectParameter("UserPassword", typeof(string));


        var userLevelParameter = userLevel.HasValue ?
            new ObjectParameter("UserLevel", userLevel) :
            new ObjectParameter("UserLevel", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarUser", userID, userNameParameter, userPasswordParameter, userLevelParameter, resultado);
    }

}

}

